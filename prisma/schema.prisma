// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int     @id @default(autoincrement())
  email        String
  name         String?
  username     String  @unique
  password     String
  profileImage String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // REFRESH TABLE
  refreshToken RefreshToken[]

  // TWEET TABLE
  tweet Tweet[]

  // MEDIA FILES
  mediaFiles MediaFile[]
}

model RefreshToken {
  id    Int    @id @default(autoincrement())
  token String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model Tweet {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Author
  author User @relation(fields: [authorId],references: [id])
  authorId Int

  replyToId Int? 
  replyTo Tweet? @relation("replies",fields: [replyToId] , references: [id],onDelete: NoAction , onUpdate: NoAction)

  replies Tweet[] @relation("replies")

  // MEDIA FILES
  mediaFiles MediaFile[]
}

model MediaFile {
  id        Int      @id @default(autoincrement())
  url String
  providerPublicId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // USER
  user User @relation(fields: [userId],references: [id])
  userId Int

  // TWEETS
  tweet Tweet @relation(fields: [tweetId],references: [id])
  tweetId Int
}
